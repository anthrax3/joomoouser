<?php
/**
 * @author      Tom Hartung <webmaster@tomhartung.com>
 * @package     Joomla
 * @subpackage  joomoouser
 * @copyright   Copyright (C) 2011 Tom Hartung. All rights reserved.
 * @since       1.5
 * @license     GNU/GPL, see LICENSE.php
 */

// Check to ensure this file is included in Joomla!
defined('_JEXEC') or die( 'Restricted access' );

jimport('joomla.application.component.controller');

/**
 * Class to generate xhtml (mostly javascript) to send follow-up emails when a comment is posted
 *
 */
class GetFollowUpEmailXhtml extends JObject
{
	/**
	 * model supporting access to joomoouser table in DB
	 * @var instance of JoomooUsersModelJoomooUser
	 */
	private $_joomoouserModel = null;
	/**
	 * JUser object
	 * @var object JUser object
	 */
	private $_user = null;

	/**
	 * Relevant rows in the jos_joomoouser table - indexed by jos_users.id/jos_joomoouser.user_id
	 * @var array of jos_joomoouser rows
	 */
	private $_joomoouserRows = array();
	/**
	 * List of user ids (jos_users.id/jos_joomoouser.user_id) to which we will be sending a follow-up email
	 * @var array of user ids
	 */
	private $_recipientIds = array();

	/**
	 * Constructor: set the model paths
	 * @access public
	 */
	public function __construct( )
	{
		//	print "Oh haiii from GetFollowUpEmailXhtml::__construct()<br />\n";

		parent::__construct();
		$this->_user = & JFactory::getUser();

		require_once JPATH_SITE .DS. 'components' .DS. 'com_joomoouser' .DS. 'assets' .DS. 'constants.php';
		require_once JPATH_SITE .DS. 'components' .DS. 'com_joomoobase' .DS. 'models' .DS. 'joomoobaseDb.php';
		require_once JPATH_SITE .DS. 'components' .DS. 'com_joomoouser' .DS. 'models' .DS. 'joomoouser.php';
		$this->_joomoouserModel = new JoomooUserModelJoomooUser();
	}
	/**
	 * generates the XHTML needed to send follow-up emails to a newly posted comment
	 * @access public
	 * @return XHTML (mostly javascript) to send follow-up emails when a comment is posted to the current article
	 */
	public function getFollowUpEmailXhtml( $article, $commentRows )
	{
		// print "Oh haiii from GetFollowUpEmailXhtml::getFollowUpEmailXhtml() in file classes/getFollowUpEmailXhtml.php<br />\n";

		//
		// Call functions that add user ids to the array of ids to whom we want to send the follow up emails
		//
		$this->_checkForEntireSite();
		$this->_checkForFollowUpAuthor( $article );
		$this->_checkForFollowUpComment( $commentRows );
		$idsToEmail = array_unique( $this->_recipientIds );
		// $this->_printLists( $commentRows, $idsToEmail );

		//
		// Use the array of user ids to generate the XHTML that sends the follow up email(s) when someone posts a comment
		//
		$xhtml  = '';
		$xhtml .= '<script text/javascript>' . "\n";
		$xhtml .= '  //' . "\n";
		$xhtml .= '  // the following javascript that supports sending follow-up emails was generated by getFollowUpEmailXhtml:' . "\n";
		$xhtml .= '  //' . "\n";
		$xhtml .= '  //<![CDATA[[ ' . "\n";
		$xhtml .= '  JoomooCommentsAjax._followUpEmailsEnabled = true;' . "\n";
		if ( count($idsToEmail) > 0 )
		{
			$xhtml .= '  JoomooCommentsAjax._followUpEmailsNeeded = true;' . "\n";
			$xhtml .= '  JoomooCommentsAjax._commentAuthorName = "' . $this->_user->name . '";' . "\n";
			if ( isset($article->readmore_link) )
			{
				$xhtml .= '  JoomooCommentsAjax._readmore_link = "' . $article->readmore_link . '";' . "\n";
			}
			$xhtml .= '  JoomooCommentsAjax._idsToEmail = new Array();' . "\n";
			$xhtml .= '  JoomooCommentsAjax._comment_posted_email = new Array();' . "\n";
			$index = 0;
			//
			// Store user id and reason code in parallel arrays (tried an array of objects and an array of arrays, but couldn't get those to work)
			//
			foreach ( $idsToEmail as $id )
			{
				// print 'Setting things up to send email to user id = "' . $id . '" for reason code "' . $this->_joomoouserRows[$id]->comment_posted_email . '"<br />';
				$xhtml .= '  JoomooCommentsAjax._idsToEmail[' . $index . '] = ' . $id . ';' . "\n";
				$xhtml .= '  JoomooCommentsAjax._comment_posted_email[' . $index . '] = "' . $this->_joomoouserRows[$id]->comment_posted_email . '";' . "\n";
				$index++;
			}
			// print 'article->readmore_link = "' . $article->readmore_link . '"<br />';
		}
		else
		{
			$xhtml .= '  JoomooCommentsAjax._followUpEmailsNeeded = false;' . "\n";
		}
		$xhtml .= '  //]]>' . "\n";
		$xhtml .= '</script>' . "\n";

		return $xhtml;
	}
	/**
	 * prints helpful debug information
	 */
	private function _printLists( $commentRows, $idsToEmail )
	{
		print '<br />commentRows: ' . print_r($commentRows ,true) . '<br />';
		print '<br />Done generating lists!<br />';
		foreach ( $this->_joomoouserRows as $joomoouserRow )
		{
			print 'joomoouserRow: ' . print_r($joomoouserRow,true) . '<br />';
		}
		print '<br />this->_recipientIds: ' . print_r($this->_recipientIds ,true) . '<br />';
		print '<br />idsToEmail: ' . print_r($idsToEmail ,true) . '<br />';
	}

	/**
	 * checks for users who want a follow-up email for comments posted to ALL articles posted to entire site
	 * @access private
	 * @return void
	 */
	private function _checkForEntireSite()
	{
		$entireSiteRows = $this->_joomoouserModel->getEntireSiteRows();

		//
		// users wanting all comments ge them all, including their own!
		//
		if ( $entireSiteRows != null )
		{
			foreach( $entireSiteRows as $entireSiteRow )
			{
				$user_id = $entireSiteRow->user_id;
				$this->_joomoouserRows[$user_id] = $entireSiteRow;
				array_push( $this->_recipientIds, $user_id );
			}
		}

		return;
	}
	/**
	 * checks whether we want to send a follow-up email to the author of the article
	 * @access private
	 * @return void
	 */
	private function _checkForFollowUpAuthor( $article )
	{
		// print '<br />article->created_by: ' . $article->created_by . '<br />';
		$authorId = $article->created_by;

		if ( $this->_user->id == $authorId )    // authors don't need to see their own comments
		{
			return;
		}

		if ( ! isset($this->_joomoouserRows[$authorId]) )
		{
			$authorRow = $this->_joomoouserModel->getRow( $authorId );
			$this->_joomoouserRows[$authorId] = $authorRow;
		}

		if ( isset($this->_joomoouserRows[$authorId]->comment_posted_email) )
		{
			if ( $this->_joomoouserRows[$authorId]->comment_posted_email == JOOMOOUSER_COMMENT_POSTED_EMAIL_FOLLOW_UP  || 
			     $this->_joomoouserRows[$authorId]->comment_posted_email == JOOMOOUSER_COMMENT_POSTED_EMAIL_FOLLOW_UP_AUTHOR )
			{
				array_push( $this->_recipientIds, $authorId );
			}
		}
	}
	/**
	 * checks for commenters who want a follow-up email when a comment is posted
	 * @access private
	 * @return void
	 */
	private function _checkForFollowUpComment( $commentRows )
	{
		$commenterIds = array();

		//
		// Build list of user ids of users who have commented on the article and
		// Ensure we have the joomoouser data for each of them in our array of joomoouser rows
		//
		foreach ( $commentRows as $commentRow )
		{
			$commenterId = $commentRow->created_by;
			if ( $this->_user->id != $commenterId )    // commenters don't need an email for their own comments
			{
				array_push( $commenterIds, $commenterId );
				if ( ! isset($this->_joomoouserRows[$commenterId]) )
				{
					$commenterRow = $this->_joomoouserModel->getRow( $commenterId );
					$this->_joomoouserRows[$commenterId] = $commenterRow;
				}
			}
		}

		$idsToCheck = array_unique( $commenterIds );
		// print '<br />Oh haiii from _checkForFollowUpComment!  idsToCheck: ' . print_r($idsToCheck,true) . '<br />';

		foreach( $idsToCheck as $idToCheck )
		{
			// print '<br />in loop: this->_joomoouserRows[$idToCheck]: ' . print_r($this->_joomoouserRows[$idToCheck],true) . '<br />';
			if ( isset($this->_joomoouserRows[$idToCheck]) )
			{
				if ( $this->_joomoouserRows[$idToCheck]->comment_posted_email == JOOMOOUSER_COMMENT_POSTED_EMAIL_FOLLOW_UP  || 
				     $this->_joomoouserRows[$idToCheck]->comment_posted_email == JOOMOOUSER_COMMENT_POSTED_EMAIL_FOLLOW_UP_COMMENT )
				{
					array_push( $this->_recipientIds, $idToCheck );
				}
			}
		}
	}
}
?>
